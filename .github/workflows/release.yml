name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
      - name: Setup Bun
        if: ${{ steps.release.outputs.release_created }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.14
      - name: Cache Bun dependencies
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Install dependencies
        if: ${{ steps.release.outputs.release_created }}
        run: bun install
      - name: Build Format
        if: ${{ steps.release.outputs.release_created }}
        run: bun run build
      - name: Verify story format exists
        if: ${{ steps.release.outputs.release_created }}
        run: test -f dist/format.js
      - name: Upload story format
        if: ${{ steps.release.outputs.release_created }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} dist/format.js --clobber
      - name: Delete all but the last 5 releases (keep tags)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all releases sorted by creation date (oldest first)
          releases=$(gh api repos/${{ github.repository }}/releases --paginate --jq 'sort_by(.created_at) | .[].id')

          count=$(echo "$releases" | wc -l)

          if [ "$count" -le 5 ]; then
            echo "Nothing to delete â€” only $count releases exist."
            exit 0
          fi

          # Determine IDs to delete (all but the last 5)
          ids_to_delete=$(echo "$releases" | head -n -5)

          for id in $ids_to_delete; do
            echo "Deleting release ID $id (tag will remain)"
            gh api -X DELETE repos/${{ github.repository }}/releases/$id
          done

  build-storybook:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.14
      - uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - run: bun install
      - run: bun run --cwd apps/storybook build
      - uses: actions/upload-pages-artifact@v3
        with:
          path: apps/storybook/storybook-static

  deploy-storybook:
    needs: build-storybook
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: pages
      cancel-in-progress: true
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
